{"version":3,"sources":["MessengerToolbar.js","MessageCard.js","MessageArea.js","MessengerSubmitArea.js","Messenger.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","card","maxHeight","alignContent","justifyContent","background","title","color","align","fontSize","MessengerToolbar","props","classes","Card","className","CardContent","Typography","gutterBottom","messageCardStyles","cardbot","maxWidth","marginBottom","carduser","sender","marginTop","marginLeft","message","timestamp","marginRight","MessageCard","isBot","variant","component","MessageArea","scrollToBottom","messagesEnd","scrollIntoView","behavior","this","entries","map","entry","idx","key","style","float","clear","ref","el","React","Component","withStyles","minHeight","height","width","overflow","MessengerSubmitArea","Paper","onSubmit","submitMessage","root","InputBase","onChange","textHandler","input","placeholder","value","Divider","divider","orientation","IconButton","onClick","iconButton","aria-label","padding","display","alignItems","flex","margin","Messenger","state","messages","event","preventDefault","setState","target","time","Date","getHours","slice","getMinutes","getSeconds","getTimestamp","push","axios","method","url","data","headers","then","response","forEach","element","text","Grid","container","direction","item","Box","light","handleMessage","bind","handleSubmit","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ff3fcd6.chunk.js","sourcesContent":["import React from 'react'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles(theme => ({\n    card: {\n        maxHeight: \"3.8em\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n        background: \"#365a9e\"\n    },\n    title: {\n        color: \"white\",\n        align: \"center\",\n        fontSize: \"1.3em\"\n    },\n}))\n\nfunction MessengerToolbar(props) {\n    const classes = useStyles()\n\n    return (\n        <Card className={classes.card}>\n            <CardContent>\n                <Typography align=\"center\" className={classes.title} color=\"textPrimary\" gutterBottom >\n                    {props && props.title ? props.title : \"TITLE NOT SPECIFIED\"}\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default MessengerToolbar","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\n\nconst messageCardStyles = makeStyles({\n    cardbot: {\n        maxWidth: \"65%\",\n        background: \"#e0f7a8\",\n        marginBottom: \"0.7em\"\n    },\n    carduser: {\n        maxWidth: \"65%\",\n        background: \"#c2d7ff\",\n        marginBottom: \"0.7em\"\n    },\n    sender: {\n        fontSize: \"0.5em\",\n        marginTop: \"-1em\",\n        marginLeft: \"-0.6em\"\n    },\n    message: {\n        fontSize: \"0.7em\",\n    },\n    timestamp: {\n        color: \"textSecondary\",\n        fontSize: \"0.5em\",\n        marginBottom: \"-1.8em\",\n        marginRight: \"-0.5em\",\n    },\n})\n\nfunction MessageCard(props) {\n    const classes = messageCardStyles()\n    const isBot = props.sender && props.sender === \"BOT\"\n    return (\n        <div align={isBot ? \"left\" : \"right\"}>\n        <Card className={isBot ? classes.cardbot: classes.carduser}>\n            <CardContent>\n                <Typography align={\"left\"} className={classes.sender} color=\"textSecondary\" gutterBottom>\n                    {props.sender}\n                </Typography>\n                <Typography align={\"center\"} className={classes.message} variant=\"h5\" component=\"h2\">\n                    {props.message}\n                </Typography>\n\n                <Typography align={\"right\"} className={classes.timestamp} color=\"textSecondary\">\n                    {props.timestamp}\n                </Typography>\n            </CardContent>\n        </Card>\n        </div>\n    )\n}\n\nexport default MessageCard","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/styles'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport MessageCard from './MessageCard.js'\n\nconst styles = () => ({\n    card: {\n        minHeight: \"28em\",\n        maxHeight: \"28em\",\n        height: \"100%\",\n        width: \"100%\",\n        overflow: \"auto\",\n        background: \"#fcfcfc\"\n    },\n})\n\nclass MessageArea extends React.Component {\n\n    scrollToBottom = () => {\n        this.messagesEnd.scrollIntoView({ behavior: \"smooth\" })\n    }\n\n    componentDidMount() {\n        this.scrollToBottom()\n    }\n\n    componentDidUpdate() {\n        this.scrollToBottom()\n    }\n\n    render() {\n        const { classes } = this.props\n\n        return (\n            <Card className={classes.card}>\n                <CardContent>\n                    {this.props.entries.map((entry, idx) => {\n                        return <MessageCard key={\"div_\" + idx}\n                            message={entry.message}\n                            sender={entry.sender}\n                            timestamp={entry.timestamp}\n                        />\n                    })}\n                    <div style={{ float: \"left\", clear: \"both\" }}\n                        ref={(el) => { this.messagesEnd = el }}>\n                    </div>\n                </CardContent>\n            </Card>\n        )\n    }\n}\n\nMessageArea.propTypes = {\n    classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(MessageArea)","import React from 'react'\nimport Paper from '@material-ui/core/Paper'\nimport InputBase from '@material-ui/core/InputBase'\nimport Divider from '@material-ui/core/Divider'\nimport IconButton from '@material-ui/core/IconButton'\nimport SearchIcon from '@material-ui/icons/Send'\nimport { withStyles } from '@material-ui/styles'\n\nconst styles = () => ({\n    root: {\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        background: \"#fcfcfc\"\n    },\n    input: {\n        marginLeft:\"0.8em\",\n        flex: 1,\n    },\n    iconButton: {\n        padding: 10,\n        background: \"#edf8ff\"\n    },\n    divider: {\n        height: 28,\n        margin: 4,\n    },\n})\n\n\nclass MessengerSubmitArea extends React.Component  {\n    render() {\n        const { classes } = this.props\n        return (\n            <Paper onSubmit={this.props.submitMessage} width=\"100%\" component=\"form\" className={classes.root}>\n                <InputBase\n                    onChange={this.props.textHandler}\n                    className={classes.input}\n                    placeholder=\"Deine Nachricht\"\n                    value={this.props.message}\n                />\n                <Divider className={classes.divider} orientation=\"vertical\" />\n                <IconButton onClick={this.props.submitMessage} className={classes.iconButton} aria-label=\"Versenden\">\n                    <SearchIcon />\n                </IconButton>\n            </Paper>\n        )\n    }\n}\n\nexport default withStyles(styles)(MessengerSubmitArea)","import React from 'react'\nimport Divider from '@material-ui/core/Divider'\nimport axios from 'axios'\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport MessengerToolbar from './MessengerToolbar.js'\nimport MessageArea from './MessageArea.js'\nimport MessengerSubmitArea from './MessengerSubmitArea.js'\n\nclass Messenger extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            messages: [],\n            message: \"\"\n        }\n    }\n\n    handleMessage(event) {\n        event.preventDefault()\n        this.setState({ message: event.target.value })\n    }\n\n    getTimestamp() {\n        const time = new Date()\n        return (\"0\" + time.getHours()).slice(-2) + \":\" +\n        (\"0\" + time.getMinutes()).slice(-2) + \":\" +\n        (\"0\" + time.getSeconds()).slice(-2)\n    }\n\n    handleSubmit(event) {\n        event.preventDefault()\n        \n        if (this.state.message === \"\") return\n\n        var messages = this.state.messages\n        const message = {\n            sender: \"YOU\",\n            message: this.state.message,\n            timestamp: this.getTimestamp()\n        }\n        messages.push(message)\n        this.setState({\n            messages: messages,\n            message: \"\"\n        })\n\n        axios({\n            method: 'post',\n            url: 'https://3bitrasa.azurewebsites.net/webhooks/rest/webhook',\n            data: message,\n            headers: { 'Content-Type': 'application/json' }\n        })\n            .then((response) => {\n                \n                var messages = this.state.messages\n                response.data.forEach(element => {\n                    const message = {\n                        sender: \"BOT\",\n                        message: element.text,\n                        timestamp: this.getTimestamp()\n                    }\n                    messages.push(message)\n                });\n                this.setState(messages)\n            })\n    }\n\n    render() {\n        return (\n            <Grid\n                container\n                direction=\"column\"\n                alignItems=\"center\"\n            >\n                <Grid item >\n                    <Box width={\"25em\"}>\n                        <MessengerToolbar title=\"3BIT Dev Chatbot\" />\n                        <MessageArea entries={this.state.messages} />\n                        <Divider light />\n                        <MessengerSubmitArea \n                            message={this.state.message} \n                            textHandler={this.handleMessage.bind(this)} \n                            submitMessage={this.handleSubmit.bind(this)} \n                        />\n                    </Box>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\nexport default Messenger","import React from 'react';\nimport './App.css';\nimport Messenger from './Messenger.js'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Messenger />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}